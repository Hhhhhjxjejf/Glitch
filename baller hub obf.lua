--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.5) ~  Much Love, Ferib 

]]--

local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function() return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...) local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"..",function(byte) if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return "";else local a=Char(StrToNumber(byte,16));if repeatNext then local FlatIdent_95CAC=0;local b;while true do if (FlatIdent_95CAC==1) then return b;end if (FlatIdent_95CAC==0) then b=Rep(a,repeatNext);repeatNext=nil;FlatIdent_95CAC=1;end end else return a;end end end);local function gBit(Bit,Start,End) if End then local FlatIdent_8D327=0;local Res;while true do if (FlatIdent_8D327==0) then Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;end end else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8() local FlatIdent_24A02=0;local a;while true do if (FlatIdent_24A02==1) then return a;end if (FlatIdent_24A02==0) then a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;FlatIdent_24A02=1;end end end local function gBits16() local FlatIdent_89ECE=0;local a;local b;while true do if (FlatIdent_89ECE==1) then return (b * 256) + a ;end if (FlatIdent_89ECE==0) then a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;FlatIdent_89ECE=1;end end end local function gBits32() local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat() local FlatIdent_1743D=0;local Left;local Right;local IsNormal;local Mantissa;local Exponent;local Sign;while true do if (2==FlatIdent_1743D) then Exponent=gBit(Right,21,31);Sign=((gBit(Right,32)==1) and  -1) or 1 ;FlatIdent_1743D=3;end if (FlatIdent_1743D==3) then if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else local FlatIdent_5ED46=0;while true do if (FlatIdent_5ED46==0) then Exponent=1;IsNormal=0;break;end end end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end if (FlatIdent_1743D==0) then Left=gBits32();Right=gBits32();FlatIdent_1743D=1;end if (FlatIdent_1743D==1) then IsNormal=1;Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;FlatIdent_1743D=2;end end end local function gString(Len) local FlatIdent_61585=0;local Str;local FStr;while true do if (FlatIdent_61585==2) then FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end FlatIdent_61585=3;end if (1==FlatIdent_61585) then Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;FlatIdent_61585=2;end if (0==FlatIdent_61585) then Str=nil;if  not Len then local FlatIdent_946F=0;while true do if (FlatIdent_946F==0) then Len=gBits32();if (Len==0) then return "";end break;end end end FlatIdent_61585=1;end if (FlatIdent_61585==3) then return Concat(FStr);end end end local gInt=gBits32;local function _R(...) return {...},Select("#",...);end local function Deserialize() local FlatIdent_6053C=0;local Instrs;local Functions;local Lines;local Chunk;local ConstCount;local Consts;while true do if (FlatIdent_6053C==2) then for Idx=1,gBits32() do local FlatIdent_8CEDF=0;local Descriptor;while true do if (FlatIdent_8CEDF==0) then Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local FlatIdent_33EA4=0;local Type;local Mask;local Inst;while true do if (FlatIdent_33EA4==0) then Type=gBit(Descriptor,2,3);Mask=gBit(Descriptor,4,6);FlatIdent_33EA4=1;end if (FlatIdent_33EA4==3) then if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;break;end if (FlatIdent_33EA4==2) then if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end FlatIdent_33EA4=3;end if (FlatIdent_33EA4==1) then Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end FlatIdent_33EA4=2;end end end break;end end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end return Chunk;end if (FlatIdent_6053C==1) then ConstCount=gBits32();Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();FlatIdent_6053C=2;end if (FlatIdent_6053C==0) then Instrs={};Functions={};Lines={};Chunk={Instrs,Functions,nil,Lines};FlatIdent_6053C=1;end end end local function Wrap(Chunk,Upvalues,Env) local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...) local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local VIP=1;local Top= -1;local Vararg={};local Args={...};local PCount=Select("#",...) -1 ;local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do local FlatIdent_3EEE1=0;while true do if (FlatIdent_3EEE1==0) then Inst=Instr[VIP];Enum=Inst[1];FlatIdent_3EEE1=1;end if (FlatIdent_3EEE1==1) then if (Enum<=71) then if (Enum<=35) then if (Enum<=17) then if (Enum<=8) then if (Enum<=3) then if (Enum<=1) then if (Enum==0) then local B;local A;Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];else local FlatIdent_324DE=0;local B;local A;while true do if (FlatIdent_324DE==2) then Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_324DE=3;end if (FlatIdent_324DE==6) then Stk[Inst[2]][Inst[3]]=Inst[4];break;end if (FlatIdent_324DE==4) then Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_324DE=5;end if (FlatIdent_324DE==3) then A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;FlatIdent_324DE=4;end if (FlatIdent_324DE==1) then VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_324DE=2;end if (FlatIdent_324DE==0) then B=nil;A=nil;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];FlatIdent_324DE=1;end if (FlatIdent_324DE==5) then Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_324DE=6;end end end elseif (Enum==2) then local B;local A;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];else local FlatIdent_20FB0=0;local Edx;local Results;local Limit;local B;local A;while true do if (FlatIdent_20FB0==4) then Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_20FB0=5;end if (FlatIdent_20FB0==7) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]();VIP=VIP + 1 ;FlatIdent_20FB0=8;end if (FlatIdent_20FB0==6) then VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));FlatIdent_20FB0=7;end if (FlatIdent_20FB0==3) then Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_20FB0=4;end if (FlatIdent_20FB0==8) then Inst=Instr[VIP];do return;end break;end if (2==FlatIdent_20FB0) then VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];FlatIdent_20FB0=3;end if (1==FlatIdent_20FB0) then Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];FlatIdent_20FB0=2;end if (0==FlatIdent_20FB0) then Edx=nil;Results,Limit=nil;B=nil;A=nil;FlatIdent_20FB0=1;end if (FlatIdent_20FB0==5) then Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end FlatIdent_20FB0=6;end end end elseif (Enum<=5) then if (Enum==4) then local B;local A;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];else local B;local A;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=6) then local FlatIdent_19F98=0;local B;local A;while true do if (FlatIdent_19F98==1) then VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_19F98=2;end if (FlatIdent_19F98==2) then Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_19F98=3;end if (FlatIdent_19F98==4) then Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_19F98=5;end if (0==FlatIdent_19F98) then B=nil;A=nil;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];FlatIdent_19F98=1;end if (FlatIdent_19F98==6) then Stk[Inst[2]][Inst[3]]=Inst[4];break;end if (FlatIdent_19F98==3) then A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;FlatIdent_19F98=4;end if (FlatIdent_19F98==5) then Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_19F98=6;end end elseif (Enum>7) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local FlatIdent_25A9F=0;local B;local A;while true do if (FlatIdent_25A9F==5) then Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_25A9F=6;end if (FlatIdent_25A9F==0) then B=nil;A=nil;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;FlatIdent_25A9F=1;end if (FlatIdent_25A9F==9) then Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];break;end if (FlatIdent_25A9F==1) then Inst=Instr[VIP];A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;FlatIdent_25A9F=2;end if (FlatIdent_25A9F==3) then Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};FlatIdent_25A9F=4;end if (FlatIdent_25A9F==8) then VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];FlatIdent_25A9F=9;end if (FlatIdent_25A9F==6) then Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_25A9F=7;end if (FlatIdent_25A9F==2) then Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;FlatIdent_25A9F=3;end if (FlatIdent_25A9F==4) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;FlatIdent_25A9F=5;end if (7==FlatIdent_25A9F) then Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];FlatIdent_25A9F=8;end end end elseif (Enum<=12) then if (Enum<=10) then if (Enum>9) then local Edx;local Results,Limit;local B;local A;Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3]~=0 ;VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]();VIP=VIP + 1 ;Inst=Instr[VIP];do return;end else local Edx;local Results,Limit;local B;local A;Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3]~=0 ;VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]();VIP=VIP + 1 ;Inst=Instr[VIP];do return;end end elseif (Enum>11) then local Edx;local Results,Limit;local B;local A;Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]();VIP=VIP + 1 ;Inst=Instr[VIP];do return;end else local FlatIdent_91B54=0;local B;local A;while true do if (FlatIdent_91B54==5) then Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];FlatIdent_91B54=6;end if (FlatIdent_91B54==0) then B=nil;A=nil;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_91B54=1;end if (FlatIdent_91B54==2) then Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_91B54=3;end if (FlatIdent_91B54==6) then Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];break;end if (FlatIdent_91B54==4) then Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;FlatIdent_91B54=5;end if (FlatIdent_91B54==3) then Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_91B54=4;end if (FlatIdent_91B54==1) then Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;FlatIdent_91B54=2;end end end elseif (Enum<=14) then if (Enum==13) then local Edx;local Results,Limit;local B;local A;Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]();VIP=VIP + 1 ;Inst=Instr[VIP];do return;end else local B;local A;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=15) then local B;local A;Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Enum>16) then local B;local A;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Stk[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else local FlatIdent_7F3C8=0;local Edx;local Results;local Limit;local B;local A;while true do if (3==FlatIdent_7F3C8) then Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_7F3C8=4;end if (FlatIdent_7F3C8==2) then A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];VIP=VIP + 1 ;FlatIdent_7F3C8=3;end if (FlatIdent_7F3C8==6) then Stk[Inst[2]]();VIP=VIP + 1 ;Inst=Instr[VIP];do return;end break;end if (0==FlatIdent_7F3C8) then Edx=nil;Results,Limit=nil;B=nil;A=nil;Stk[Inst[2]]=Env[Inst[3]];FlatIdent_7F3C8=1;end if (FlatIdent_7F3C8==4) then Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end VIP=VIP + 1 ;FlatIdent_7F3C8=5;end if (5==FlatIdent_7F3C8) then Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_7F3C8=6;end if (1==FlatIdent_7F3C8) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_7F3C8=2;end end end elseif (Enum<=26) then if (Enum<=21) then if (Enum<=19) then if (Enum==18) then Stk[Inst[2]][Inst[3]]=Inst[4];else local FlatIdent_651C5=0;local A;while true do if (2==FlatIdent_651C5) then Stk[A]=Stk[A](Stk[A + 1 ]);VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]();FlatIdent_651C5=3;end if (FlatIdent_651C5==0) then A=nil;Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_651C5=1;end if (FlatIdent_651C5==1) then Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_651C5=2;end if (FlatIdent_651C5==3) then VIP=VIP + 1 ;Inst=Instr[VIP];do return;end break;end end end elseif (Enum>20) then local FlatIdent_512FF=0;local A;while true do if (FlatIdent_512FF==0) then A=Inst[2];Stk[A](Stk[A + 1 ]);break;end end else local FlatIdent_829F9=0;local B;local A;while true do if (FlatIdent_829F9==3) then Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]={};FlatIdent_829F9=4;end if (FlatIdent_829F9==0) then B=nil;A=nil;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];VIP=VIP + 1 ;FlatIdent_829F9=1;end if (FlatIdent_829F9==2) then Inst=Instr[VIP];A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;FlatIdent_829F9=3;end if (FlatIdent_829F9==4) then VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]][Inst[3]]=Inst[4];break;end if (FlatIdent_829F9==1) then Inst=Instr[VIP];A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;FlatIdent_829F9=2;end end end elseif (Enum<=23) then if (Enum>22) then local FlatIdent_90113=0;local B;local A;while true do if (FlatIdent_90113==6) then Stk[Inst[2]][Inst[3]]=Inst[4];break;end if (FlatIdent_90113==5) then Stk[Inst[2]]={};VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_90113=6;end if (FlatIdent_90113==1) then VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];FlatIdent_90113=2;end if (FlatIdent_90113==4) then Stk[A]=B[Inst[4]];VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_90113=5;end if (FlatIdent_90113==0) then B=nil;A=nil;Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];FlatIdent_90113=1;end if (FlatIdent_90113==3) then A=Inst[2];B=Stk[Inst[3]];Stk[A + 1 ]=B;FlatIdent_90113=4;end if (2==FlatIdent_90113) then Stk[A](Unpack(Stk,A + 1 ,Inst[3]));VIP=VIP + 1 ;Inst=Instr[VIP];FlatIdent_90113=3;end end else S
